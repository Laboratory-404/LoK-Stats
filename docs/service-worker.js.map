{"version":3,"file":"service-worker.js","sources":["../../generated/service-worker.js","../../../src/service-worker.js"],"sourcesContent":["// TODO remove for 1.0\nexport const timestamp = {\n\ttoString: () => {\n\t\tthrow new Error('`timestamp` has been removed from $service-worker. Use `version` instead');\n\t}\n};\n\nexport const build = [\n\t\"/_app/start-ea0dd12f.js\",\n\t\"/_app/pages/__layout.svelte-37f03e1b.js\",\n\t\"/_app/assets/pages/__layout.svelte-01229d11.css\",\n\t\"/_app/pages/__error.svelte-bce36983.js\",\n\t\"/_app/pages/index.svelte-e41662a6.js\",\n\t\"/_app/pages/land-_id_.svelte-8e16cb0b.js\",\n\t\"/_app/chunks/vendor-ad1cfbc0.js\",\n\t\"/_app/chunks/stores-eb6a96cf.js\",\n\t\"/_app/chunks/Land-332c473e.js\",\n\t\"/_app/assets/Land-80a0df5b.css\"\n];\n\nexport const files = [\n\t\"/favicon.png\",\n\t\"/images/logos/logo-lok-192.png\",\n\t\"/images/logos/logo-lok-256.png\",\n\t\"/images/logos/logo.png\",\n\t\"/manifest.webmanifest\",\n\t\"/robots.txt\"\n];\n\nexport const prerendered = [\n\t\"/\"\n];\n\nexport const version = \"1648612531569\";","// noinspection DuplicatedCode\n\nimport { build, files, version } from '$service-worker'\n\nconst ASSETS = `cache${version}`\n\n// `build` is an array of all the files generated by the bundler,\n// `files` is an array of everything in the `static` directory\nconst to_cache = build.concat(files)\nconst staticAssets = new Set(to_cache)\n\nself.addEventListener('install', event => {\n\t// @ts-ignore\n\t// noinspection JSUnresolvedFunction\n\tevent.waitUntil(\n\t\tcaches.open(ASSETS).then(cache => cache.addAll(to_cache)).then(() => {\n\t\t\t// @ts-ignore\n\t\t\t// noinspection JSIgnoredPromiseFromCall\n\t\t\t// noinspection JSUnresolvedFunction\n\t\t\tself.skipWaiting()\n\t\t})\n\t)\n})\n\nself.addEventListener('activate', event => {\n\t// @ts-ignore\n\t// noinspection JSUnresolvedFunction\n\tevent.waitUntil(\n\t\tcaches.keys().then(async keys => {\n\t\t\t// delete old caches\n\t\t\tfor (const key of keys) {\n\t\t\t\tif (key !== ASSETS) await caches.delete(key)\n\t\t\t}\n\n\t\t\t// @ts-ignore\n\t\t\t// noinspection JSUnresolvedVariable\n\t\t\tawait self.clients.claim()\n\t\t})\n\t)\n})\n\nasync function fetchAndCache(request) {\n\tconst cache = await caches.open(`offline${version}`)\n\n\ttry {\n\t\tconst response = await fetch(request)\n\t\t// noinspection JSCheckFunctionSignatures\n\t\tawait cache.put(request, response.clone())\n\n\t\treturn response\n\t} catch (err) {\n\t\tconst response = await cache.match(request)\n\n\t\tif (response) return response\n\n\t\tthrow err\n\t}\n}\n\nself.addEventListener('fetch', event => {\n\t// @ts-ignore\n\t// noinspection JSUnresolvedVariable\n\tif (event.request.method !== 'GET' || event.request.headers.has('range')) return\n\n\t// @ts-ignore\n\t// noinspection JSUnresolvedVariable\n\tconst url = new URL(event.request.url)\n\n\t// don't try to handle e.g. data: URIs\n\tconst isHttp = url.protocol.startsWith('http')\n\tconst isDevServerRequest = url.hostname === self.location.hostname && url.port !== self.location.port\n\tconst isStaticAsset = url.host === self.location.host && staticAssets.has(url.pathname)\n\t// @ts-ignore\n\t// noinspection JSUnresolvedVariable\n\tconst skipBecauseUncached = event.request.cache === 'only-if-cached' && !isStaticAsset\n\n\tif (isHttp && !isDevServerRequest && !skipBecauseUncached) {\n\t\t// @ts-ignore\n\t\t// noinspection JSUnresolvedFunction\n\t\tevent.respondWith((async () => {\n\t\t\t// always serve static files and bundler-generated assets from cache.\n\t\t\t// if your application has other URLs with data that will never change,\n\t\t\t// set this variable to true for them and they will only be fetched once.\n\t\t\t// @ts-ignore\n\t\t\t// noinspection JSUnresolvedVariable\n\t\t\tconst cachedAsset = isStaticAsset && await caches.match(event.request)\n\n\t\t\t// for pages, you might want to serve a build `service-worker-index.html` file,\n\t\t\t// which Sapper has generated for you. It's not right for every\n\t\t\t// app, but if it's right for yours then uncomment this section\n\t\t\t/*\n\t\t\tif (!cachedAsset && url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {\n\t\t\t\treturn caches.match('/service-worker-index.html')\n\t\t\t}\n\t\t\t*/\n\t\t\t// @ts-ignore\n\t\t\t// noinspection JSUnresolvedVariable\n\t\t\treturn cachedAsset || fetchAndCache(event.request)\n\t\t})())\n\t}\n})"],"names":[],"mappings":"AAOO,MAAM,QAAQ;AAAA,EACpB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAGM,MAAM,QAAQ;AAAA,EACpB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAOM,MAAM,UAAU;AC7BvB,MAAM,SAAS,QAAQ;AAIvB,MAAM,WAAW,MAAM,OAAO;AAC9B,MAAM,eAAe,IAAI,IAAI;AAE7B,KAAK,iBAAiB,WAAW,WAAS;AAGzC,QAAM,UACL,OAAO,KAAK,QAAQ,KAAK,WAAS,MAAM,OAAO,WAAW,KAAK,MAAM;AAIpE,SAAK;AAAA;AAAA;AAKR,KAAK,iBAAiB,YAAY,WAAS;AAG1C,QAAM,UACL,OAAO,OAAO,KAAK,OAAM,SAAQ;AAEhC,eAAW,OAAO,MAAM;AACvB,UAAI,QAAQ;AAAQ,cAAM,OAAO,OAAO;AAAA;AAKzC,UAAM,KAAK,QAAQ;AAAA;AAAA;AAKtB,6BAA6B,SAAS;AACrC,QAAM,QAAQ,MAAM,OAAO,KAAK,UAAU;AAE1C,MAAI;AACH,UAAM,WAAW,MAAM,MAAM;AAE7B,UAAM,MAAM,IAAI,SAAS,SAAS;AAElC,WAAO;AAAA,WACC,KAAP;AACD,UAAM,WAAW,MAAM,MAAM,MAAM;AAEnC,QAAI;AAAU,aAAO;AAErB,UAAM;AAAA;AAAA;AAIR,KAAK,iBAAiB,SAAS,WAAS;AAGvC,MAAI,MAAM,QAAQ,WAAW,SAAS,MAAM,QAAQ,QAAQ,IAAI;AAAU;AAI1E,QAAM,MAAM,IAAI,IAAI,MAAM,QAAQ;AAGlC,QAAM,SAAS,IAAI,SAAS,WAAW;AACvC,QAAM,qBAAqB,IAAI,aAAa,KAAK,SAAS,YAAY,IAAI,SAAS,KAAK,SAAS;AACjG,QAAM,gBAAgB,IAAI,SAAS,KAAK,SAAS,QAAQ,aAAa,IAAI,IAAI;AAG9E,QAAM,sBAAsB,MAAM,QAAQ,UAAU,oBAAoB,CAAC;AAEzE,MAAI,UAAU,CAAC,sBAAsB,CAAC,qBAAqB;AAG1D,UAAM,YAAa,aAAY;AAM9B,YAAM,cAAc,iBAAiB,MAAM,OAAO,MAAM,MAAM;AAY9D,aAAO,eAAe,cAAc,MAAM;AAAA;AAAA;AAAA;"}